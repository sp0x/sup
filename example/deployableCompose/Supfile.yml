version: 0.4

#The environment vars you'll use
env:
  NAME: flasky_composable
  BRANCH: master
  IMAGE: netlyt/flasky_composable
  SERVICE_NAME: app
  HOST_PORT: 8089
  CONTAINER_PORT: 5000

networks:
  # The staging directory
  stg:
    hosts:
      - v_m_naydenova@35.243.173.143

commands:
  #These commands are just helpers, don't modify them
  ping:
    desc: Print uname and current date/time
    run: uname -a; date

  bash:
    desc: Interactive shell on all hosts
    stdin: true
    run: bash


  pre-build:
    desc: Initialize directory
    run: mkdir -p /tmp/$IMAGE

  build:
    desc: Build Docker image from current directory, push to Docker Hub
    # local: sup $SUP_ENV -f ./builder/Supfile $SUP_NETWORK build
    upload:
      - src: ./
        dst: /tmp/$IMAGE
    script: ./scripts/docker-build.sh
    once: true

  mytest:
    run: echo $SUP_USER

  pull:
    desc: Pull latest Docker image
    run: sudo docker-compose pull $SERVICE_NAME
    chdir: /tmp/$IMAGE

  config:
    desc: Upload/test config file.
    upload:
      - src: ./example.$SUP_NETWORK.cfg
        dst: /tmp/$IMAGE
    run: test -f /tmp/$IMAGE/example.$SUP_NETWORK.cfg

  stop:
    desc: Stop Docker container
    run: sudo docker-compose stop $SERVICE_NAME || exit 0
    chdir: /tmp/$IMAGE

  rm:
    desc: Remove Docker container
    run: sudo docker-compose rm -f $SERVICE_NAME || exit 0

  start:
    desc: Start a stopped Docker container
    run: sudo docker-compose start $SERVICE_NAME || exit 0
    chdir: /tmp/$IMAGE

#  run_with_config:
#    desc: Run Docker container
#    run: >
#      sudo docker run -d \
#        -p $HOST_PORT:$CONTAINER_PORT \
#        -v /tmp/example.$SUP_NETWORK.cfg:/etc/example.cfg \
#        --restart=always \
#        --name $NAME $IMAGE

  run:
    desc: Run Docker container
    run: >
      sudo docker-compose up -d $SERVICE_NAME
    chdir: /tmp/$IMAGE

  restart:
    desc: Restart Docker container
    run: sudo docker-compose restart $SERVICE_NAME || exit 0
    chdir: /tmp/$IMAGE

  stop-rm-run:
    desc: Rolling update (stop & remove old Docker container, run new one)
    run: >
      sudo docker-compose stop $SERVICE_NAME || :; \
        sudo docker-compose rm -f $SERVICE_NAME || :; \
        sudo docker-compose up -d $SERVICE_NAME
    serial: 1
    chdir: /tmp/$IMAGE

  ps:
    desc: List running Docker containers
    run: sudo docker-compose ps
    chdir: /tmp/$IMAGE

  logs:
    desc: Docker logs
    run: sudo docker-compose logs | grep $SERVICE_NAME
    chdir: /tmp/$IMAGE

  tail-logs:
    desc: Tail Docker logs
    run: sudo docker-compose logs --tail=20 -f $SERVICE_NAME
    chdir: /tmp/$IMAGE

  health:
    desc: Application health check
    run: curl localhost:$HOST_PORT

  slack-notify:
    desc: Notify Slack about new deployment
    local: >
      curl -X POST --data-urlencode 'payload={"channel": "#dev", "text": "['$SUP_NETWORK'] '$SUP_USER' deployed '$NAME'"}' \
        https://hooks.slack.com/services/ID


targets:
  #The deployment target command, it runs multiple commands one after another, ensuring the previous one returned 0
  deploy:
    - pre-build
    - build
    - pull
    - stop-rm-run
    - ps
    - logs
    - health
    - slack-notify
